plugins {
    id 'java'
    id 'maven-publish'
}

group = 'com.github.Wunso'
version = '0.0.1'

java {
    toolchain {
        targetCompatibility = JavaVersion.VERSION_11
        sourceCompatibility = JavaVersion.VERSION_11
    }
}

repositories {
    mavenLocal()
    maven { url 'https://jitpack.io' }
    mavenCentral()
    maven {
        url 'https://repo.runelite.net'
        content {
            // only download packages for group net.runelite*
            includeGroupByRegex "net\\.runelite.*"
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'com.github.Wunso'
            artifactId = 'badbot'
            version = '0.0.1'

            from components.java
        }
    }
}

def lastSupportedVersion = "1.9.7"
def runeLiteVersion = getRuneLiteVersion()
def supportedCheck = false
if (supportedCheck) {
    if (runeLiteVersion != lastSupportedVersion) {
        println("Warning - client has been updated")
        throw new Exception("Out of date (last supported: " + lastSupportedVersion + " current client: " + runeLiteVersion + ")")
    }
}

static def getRuneLiteVersion() {
    URL url = new URL("http://repo.runelite.net/net/runelite/client/maven-metadata.xml")
    URLConnection urlConnection = url.openConnection()
    BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(
            urlConnection.getInputStream()))
    String latestName = null
    String inputLine
    while ((inputLine = bufferedReader.readLine()) != null) {
        inputLine = inputLine.trim()
        if (inputLine.contains("<release>")) {
            latestName = inputLine.replace("<release>", "").replace("</release>", "")
        }
    }
    bufferedReader.close()
    return latestName
}

dependencies {
    implementation group: 'org.clojure', name: 'clojure', version: '1.9.0'
    implementation group: 'org.clojure', name: 'tools.nrepl', version: '0.2.12'
    implementation group: 'net.runelite', name: 'client', version: runeLiteVersion
    implementation group: 'net.runelite', name: 'cache', version: runeLiteVersion
    implementation 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.slf4j:slf4j-simple:1.7.36'
    testImplementation group: 'net.runelite', name: 'client', version: runeLiteVersion, {
        exclude group: 'ch.qos.logback', module: 'logback-classic'
    }

    //implementation group: 'com.github.Wunso', name: 'badbotplugin', version:'95eb5c4835'
    //implementation 'com.github.Wunso:badbotdax:26f20c5c6d'
    implementation group: 'com.github.joonasvali.naturalmouse', name: 'naturalmouse', version: '2.0.3'
    implementation group: 'javassist', name: 'javassist', version: '3.12.1.GA'
    implementation group: 'net.sf.jopt-simple', name:'jopt-simple', version: '5.0.4'
    implementation 'org.jetbrains:annotations:16.0.2'
}

sourceSets {
    main {
        java {
            srcDirs= ["src/main/java"]
        }
    }
}

project.configurations.implementation.setCanBeResolved(true)
jar {
    manifest.attributes('Main-Class': 'net.runelite.osrsbb.launcher.Application')
    from{
        configurations.implementation.collect {it.isDirectory() ? it: zipTree(it)}
    }

    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.SF'
    exclude 'META-INF/*.DSA'

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    destinationDirectory.set(file("$rootDir"))
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

task badRun(type: JavaExec) {
    group = "Execution"
    description = "Runs the main method within Badbot"
    classpath = sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
    getMainClass() set "net.runelite.osrsbb.launcher.Application"
    jvmArgs "-debug"
    args "--bot-runelite --developer-mode".split(" ")
}

task headlessBotRun(type: JavaExec) {
    group = "Execution"
    description = "Runs the main method within Badbot"
    classpath = sourceSets.main.runtimeClasspath + sourceSets.main.compileClasspath
    getMainClass() set "net.runelite.osrsbb.launcher.Application"
    jvmArgs "-debug"
    args "--bot-runelite --developer-mode --headless".split(" ")
}